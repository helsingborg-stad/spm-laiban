//
//  Created by Tomas Green on 2021-12-21.
//

import Foundation
import Weather

/// Describes a suggestion tag
internal enum AttireSuggestionTag: String,Codable,Equatable {
    /// Indicates that the suggestion feedback was generated by a child
    case child
    /// Indicates that the suggestion feedback was generated by a child
    case teacher
    /// Indicates that the suggestion feedback was generated by the system
    case system
}
/// Describes suggestion rating
internal enum AttireSuggestionRating: Int,Codable,Equatable {
    /// The suggestio was bad, rating of 1
    case bad = 1
    /// The suggestio was good, rating of 4
    case good = 4
}
/// Describes a suggestion feedback record
internal struct AttireSuggestionFeedback: Codable,Equatable {
    /// The id of the feedback
    internal let id:String
    /// The rating between 1 and 4, usually generated by `AttireSuggestionRating`
    internal let rating:Int
    /// A tag, usually generated by `AttireSuggestionTag`
    internal let tag:String?
    /// Record reference id
    internal let recordId:String?
    /// Garment encoded string. Should be compatible with Garment.decode(string:) function
    internal let garments:String
    /// The date and time for the feedback
    internal let date:Date
    /// Initializes a new feedback object
    /// - Parameters:
    ///   - rating: The rating between 1 and 4, usually generated by `AttireSuggestionRating`
    ///   - tag: A tag, usually generated by `AttireSuggestionTag`
    ///   - recordId: Record reference id
    ///   - garments: Garment encoded string. Should be compatible with Garment.decode(string:) function
    internal init(rating:Int, tag:String, recordId:String? = nil, garments:String) {
        self.id = UUID().uuidString
        self.rating = rating
        self.recordId = recordId
        self.garments = garments
        self.tag = tag
        self.date = Date()
    }
}
/// Describes an attire suggestion made by a user.
internal struct AttireSuggestionRecord: Codable,Identifiable,Equatable {
    /// The id of the suggestion
    internal let id:String
    /// The date/time of the suggestion
    internal let date:Date
    /// The suggested garments
    internal let garments:[Garment]
    /// Current weather conditions
    internal let conditions:WeatherCondition
    /// Validates a suggestion against weather conditions and the current time
    /// - Parameters:
    ///   - conditions: the conditions to compare with
    ///   - dateSensitive: whether or not the validation is time sensitive, ie more than two weeks old
    ///   - referenceDate: date of reference, used in combination with the dateSensitive property
    /// - Returns: whether or not the suggestion is valid or not
    internal func isValid(for conditions:WeatherCondition, dateSensitive:Bool = true, referenceDate:Date = Date()) -> Bool {
        if self.conditions == conditions {
            if dateSensitive  {
                return date.addingTimeInterval(60 * 60 * 24 * 14) > referenceDate
            }
            return true
        }
        return false
    }
    /// Initialized a new suggestion based on the given parameters
    /// - Parameters:
    ///   - garments: an array of garments
    ///   - contitions: the weather conditions at the time of the suggestion
    ///   - date: the date of the suggestion
    internal init(garments:[Garment], contitions:WeatherCondition, date:Date = Date()) {
        self.id = UUID().uuidString
        self.garments = garments
        self.conditions = contitions
        self.date = date
    }
}
/// Describes backend errors
internal struct AttireSuggestionBackendError : Codable, LocalizedError {
    /// A message
    internal let message:String?
    /// Type of error
    internal let type:String?
    /// Title
    internal let title:String?
    /// HTTP Status code
    internal let status:Int?
    /// A trance id
    internal let traceId:String?
    /// Dictionary of errors.
    internal let errors:[String:[String]]?
    internal var errorDescription: String? {
        return message
    }
}
/// Describes garment report
internal struct AttireSuggestionReport: Codable {
    /// Unit code
    internal let enhetKod:String
    /// Timestamp of the report
    internal let timestamp:Date
    /// Temeprature at the time of report
    internal let temperature:Double?
    /// The humidity at the time of report
    internal let humidity:Double?
    /// The dewPoint at the time of report
    internal let dewPoint:Double?
    /// The windSpeed at the time of report
    internal let windSpeed:Double?
    /// The windGustSpeed at the time of report
    internal let windGustSpeed:Double?
    /// The windDirection at the time of report
    internal let windDirection:Double?
    /// The airPressure at the time of report
    internal let airPressure:Double?
    /// The totalPrecipitation at the time of report
    internal let totalPrecipitation:Double?
    /// The clothes fit for the reported weather, each garment is unique
    internal let clothes:[Garment]
    /// Report tag
    internal let tag:AttireSuggestionTag?
    /// Rating (0-4)
    internal let rating:AttireSuggestionRating?
    /// Initializes a new report
    /// - Parameters:
    ///   - enhetKod: Unit code
    ///   - timestamp: Timestamp of the report
    ///   - temperature: Temeprature at the time of report
    ///   - humidity: The humidity at the time of report
    ///   - dewPoint: The dewPoint at the time of report
    ///   - windSpeed: The windSpeed at the time of report
    ///   - windGustSpeed: The windGustSpeed at the time of report
    ///   - windDirection: The windDirection at the time of report
    ///   - airPressure: The airPressure at the time of report
    ///   - totalPrecipitation: The totalPrecipitation at the time of report
    ///   - clothes: The clothes fit for the reported weather, each garment is unique
    ///   - tag: report tag
    ///   - rating: report rating
    internal init(
        enhetKod:String,
        timestamp:Date,
        temperature:Double? = nil,
        humidity:Double? = nil,
        dewPoint:Double? = nil,
        windSpeed:Double? = nil,
        windGustSpeed:Double? = nil,
        windDirection:Double? = nil,
        airPressure:Double? = nil,
        totalPrecipitation:Double? = nil,
        clothes:Set<Garment>,
        tag:AttireSuggestionTag?,
        rating:AttireSuggestionRating? = nil
    ) {
        self.enhetKod = enhetKod
        self.timestamp = timestamp
        self.temperature = temperature
        self.humidity = humidity
        self.dewPoint = dewPoint
        self.windSpeed = windSpeed
        self.windGustSpeed = windGustSpeed
        self.windDirection = windDirection
        self.airPressure = airPressure
        self.totalPrecipitation = totalPrecipitation
        self.clothes = Array(clothes)
        self.tag = tag
        self.rating = rating
    }
}
